function cov_l04zsdh5m(){var path="/Users/mugahedhussain/git/repository/BreedFindingApplication/api/findBreedingService/findBreedingServiceWorkflow.js";var hash="e6661bcd5909539b832fd3fef59ba45d309a89f0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/mugahedhussain/git/repository/BreedFindingApplication/api/findBreedingService/findBreedingServiceWorkflow.js",statementMap:{"0":{start:{line:1,column:25},end:{line:1,column:54}},"1":{start:{line:2,column:28},end:{line:2,column:60}},"2":{start:{line:4,column:0},end:{line:13,column:2}},"3":{start:{line:6,column:15},end:{line:6,column:56}},"4":{start:{line:10,column:23},end:{line:10,column:61}},"5":{start:{line:12,column:2},end:{line:12,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:26},end:{line:4,column:27}},loc:{start:{line:4,column:38},end:{line:13,column:1}},line:4}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e6661bcd5909539b832fd3fef59ba45d309a89f0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_l04zsdh5m=function(){return actualCoverage;};}return actualCoverage;}cov_l04zsdh5m();const getCatBreedsData=(cov_l04zsdh5m().s[0]++,require('./getCatBreedsData'));const digestCatBreedsData=(cov_l04zsdh5m().s[1]++,require('./digestCatBreedsData'));cov_l04zsdh5m().s[2]++;module.exports.workflow=async()=>{cov_l04zsdh5m().f[0]++;//get the data from the cat api site
const data=(cov_l04zsdh5m().s[3]++,await getCatBreedsData.getCatBreedsData());//console.log(data);
//digest the data to return the top five cat breeding that ...
const digestedDara=(cov_l04zsdh5m().s[4]++,await digestCatBreedsData.digest(data));cov_l04zsdh5m().s[5]++;return digestedDara;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbmRCcmVlZGluZ1NlcnZpY2VXb3JrZmxvdy5qcyJdLCJuYW1lcyI6WyJnZXRDYXRCcmVlZHNEYXRhIiwicmVxdWlyZSIsImRpZ2VzdENhdEJyZWVkc0RhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwid29ya2Zsb3ciLCJkYXRhIiwiZGlnZXN0ZWREYXJhIiwiZGlnZXN0Il0sIm1hcHBpbmdzIjoiZ3RDQWVZO3lGQWZaLEtBQU1BLENBQUFBLGdCQUFnQix5QkFBR0MsT0FBTyxDQUFDLG9CQUFELENBQVYsQ0FBdEIsQ0FDQSxLQUFNQyxDQUFBQSxtQkFBbUIseUJBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUFWLENBQXpCLEMsdUJBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxRQUFmLENBQTBCLFNBQVksd0JBQ3BDO0FBQ0EsS0FBTUMsQ0FBQUEsSUFBSSx5QkFBRyxLQUFNTixDQUFBQSxnQkFBZ0IsQ0FBQ0EsZ0JBQWpCLEVBQVQsQ0FBVixDQUNBO0FBRUE7QUFDQSxLQUFNTyxDQUFBQSxZQUFZLHlCQUFHLEtBQU1MLENBQUFBLG1CQUFtQixDQUFDTSxNQUFwQixDQUEyQkYsSUFBM0IsQ0FBVCxDQUFsQixDQU5vQyx1QkFRcEMsTUFBT0MsQ0FBQUEsWUFBUCxDQUNELENBVEQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRDYXRCcmVlZHNEYXRhID0gcmVxdWlyZSgnLi9nZXRDYXRCcmVlZHNEYXRhJyk7XG5jb25zdCBkaWdlc3RDYXRCcmVlZHNEYXRhID0gcmVxdWlyZSgnLi9kaWdlc3RDYXRCcmVlZHNEYXRhJyk7XG5cbm1vZHVsZS5leHBvcnRzLndvcmtmbG93ID0gYXN5bmMgKCkgPT4ge1xuICAvL2dldCB0aGUgZGF0YSBmcm9tIHRoZSBjYXQgYXBpIHNpdGVcbiAgY29uc3QgZGF0YSA9IGF3YWl0IGdldENhdEJyZWVkc0RhdGEuZ2V0Q2F0QnJlZWRzRGF0YSgpO1xuICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuXG4gIC8vZGlnZXN0IHRoZSBkYXRhIHRvIHJldHVybiB0aGUgdG9wIGZpdmUgY2F0IGJyZWVkaW5nIHRoYXQgLi4uXG4gIGNvbnN0IGRpZ2VzdGVkRGFyYSA9IGF3YWl0IGRpZ2VzdENhdEJyZWVkc0RhdGEuZGlnZXN0KGRhdGEpO1xuXG4gIHJldHVybiBkaWdlc3RlZERhcmE7XG59O1xuIl19